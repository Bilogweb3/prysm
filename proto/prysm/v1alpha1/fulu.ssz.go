// Code generated by fastssz. DO NOT EDIT.
// Hash: 1ae17770f250bba7cc44b22fe2caa572336049bcb8ff6d9f517238a92a0a0e10
package eth

import (
	ssz "github.com/prysmaticlabs/fastssz"
	github_com_prysmaticlabs_prysm_v5_consensus_types_primitives "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives"
)

// MarshalSSZ ssz marshals the DataColumnSidecar object
func (d *DataColumnSidecar) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DataColumnSidecar object to a target array
func (d *DataColumnSidecar) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(356)

	// Field (0) 'ColumnIndex'
	dst = ssz.MarshalUint64(dst, d.ColumnIndex)

	// Offset (1) 'DataColumn'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.DataColumn) * 2048

	// Offset (2) 'KzgCommitments'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.KzgCommitments) * 48

	// Offset (3) 'KzgProof'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.KzgProof) * 48

	// Field (4) 'SignedBlockHeader'
	if d.SignedBlockHeader == nil {
		d.SignedBlockHeader = new(SignedBeaconBlockHeader)
	}
	if dst, err = d.SignedBlockHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'KzgCommitmentsInclusionProof'
	if size := len(d.KzgCommitmentsInclusionProof); size != 4 {
		err = ssz.ErrVectorLengthFn("--.KzgCommitmentsInclusionProof", size, 4)
		return
	}
	for ii := 0; ii < 4; ii++ {
		if size := len(d.KzgCommitmentsInclusionProof[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("--.KzgCommitmentsInclusionProof[ii]", size, 32)
			return
		}
		dst = append(dst, d.KzgCommitmentsInclusionProof[ii]...)
	}

	// Field (1) 'DataColumn'
	if size := len(d.DataColumn); size > 4096 {
		err = ssz.ErrListTooBigFn("--.DataColumn", size, 4096)
		return
	}
	for ii := 0; ii < len(d.DataColumn); ii++ {
		if size := len(d.DataColumn[ii]); size != 2048 {
			err = ssz.ErrBytesLengthFn("--.DataColumn[ii]", size, 2048)
			return
		}
		dst = append(dst, d.DataColumn[ii]...)
	}

	// Field (2) 'KzgCommitments'
	if size := len(d.KzgCommitments); size > 4096 {
		err = ssz.ErrListTooBigFn("--.KzgCommitments", size, 4096)
		return
	}
	for ii := 0; ii < len(d.KzgCommitments); ii++ {
		if size := len(d.KzgCommitments[ii]); size != 48 {
			err = ssz.ErrBytesLengthFn("--.KzgCommitments[ii]", size, 48)
			return
		}
		dst = append(dst, d.KzgCommitments[ii]...)
	}

	// Field (3) 'KzgProof'
	if size := len(d.KzgProof); size > 4096 {
		err = ssz.ErrListTooBigFn("--.KzgProof", size, 4096)
		return
	}
	for ii := 0; ii < len(d.KzgProof); ii++ {
		if size := len(d.KzgProof[ii]); size != 48 {
			err = ssz.ErrBytesLengthFn("--.KzgProof[ii]", size, 48)
			return
		}
		dst = append(dst, d.KzgProof[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the DataColumnSidecar object
func (d *DataColumnSidecar) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 356 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3 uint64

	// Field (0) 'ColumnIndex'
	d.ColumnIndex = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'DataColumn'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 356 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'KzgCommitments'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'KzgProof'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'SignedBlockHeader'
	if d.SignedBlockHeader == nil {
		d.SignedBlockHeader = new(SignedBeaconBlockHeader)
	}
	if err = d.SignedBlockHeader.UnmarshalSSZ(buf[20:228]); err != nil {
		return err
	}

	// Field (5) 'KzgCommitmentsInclusionProof'
	d.KzgCommitmentsInclusionProof = make([][]byte, 4)
	for ii := 0; ii < 4; ii++ {
		if cap(d.KzgCommitmentsInclusionProof[ii]) == 0 {
			d.KzgCommitmentsInclusionProof[ii] = make([]byte, 0, len(buf[228:356][ii*32:(ii+1)*32]))
		}
		d.KzgCommitmentsInclusionProof[ii] = append(d.KzgCommitmentsInclusionProof[ii], buf[228:356][ii*32:(ii+1)*32]...)
	}

	// Field (1) 'DataColumn'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 2048, 4096)
		if err != nil {
			return err
		}
		d.DataColumn = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(d.DataColumn[ii]) == 0 {
				d.DataColumn[ii] = make([]byte, 0, len(buf[ii*2048:(ii+1)*2048]))
			}
			d.DataColumn[ii] = append(d.DataColumn[ii], buf[ii*2048:(ii+1)*2048]...)
		}
	}

	// Field (2) 'KzgCommitments'
	{
		buf = tail[o2:o3]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		d.KzgCommitments = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(d.KzgCommitments[ii]) == 0 {
				d.KzgCommitments[ii] = make([]byte, 0, len(buf[ii*48:(ii+1)*48]))
			}
			d.KzgCommitments[ii] = append(d.KzgCommitments[ii], buf[ii*48:(ii+1)*48]...)
		}
	}

	// Field (3) 'KzgProof'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		d.KzgProof = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(d.KzgProof[ii]) == 0 {
				d.KzgProof[ii] = make([]byte, 0, len(buf[ii*48:(ii+1)*48]))
			}
			d.KzgProof[ii] = append(d.KzgProof[ii], buf[ii*48:(ii+1)*48]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DataColumnSidecar object
func (d *DataColumnSidecar) SizeSSZ() (size int) {
	size = 356

	// Field (1) 'DataColumn'
	size += len(d.DataColumn) * 2048

	// Field (2) 'KzgCommitments'
	size += len(d.KzgCommitments) * 48

	// Field (3) 'KzgProof'
	size += len(d.KzgProof) * 48

	return
}

// HashTreeRoot ssz hashes the DataColumnSidecar object
func (d *DataColumnSidecar) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DataColumnSidecar object with a hasher
func (d *DataColumnSidecar) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ColumnIndex'
	hh.PutUint64(d.ColumnIndex)

	// Field (1) 'DataColumn'
	{
		if size := len(d.DataColumn); size > 4096 {
			err = ssz.ErrListTooBigFn("--.DataColumn", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.DataColumn {
			if len(i) != 2048 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(d.DataColumn))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (2) 'KzgCommitments'
	{
		if size := len(d.KzgCommitments); size > 4096 {
			err = ssz.ErrListTooBigFn("--.KzgCommitments", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.KzgCommitments {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(d.KzgCommitments))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (3) 'KzgProof'
	{
		if size := len(d.KzgProof); size > 4096 {
			err = ssz.ErrListTooBigFn("--.KzgProof", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.KzgProof {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(d.KzgProof))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (4) 'SignedBlockHeader'
	if err = d.SignedBlockHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'KzgCommitmentsInclusionProof'
	{
		if size := len(d.KzgCommitmentsInclusionProof); size != 4 {
			err = ssz.ErrVectorLengthFn("--.KzgCommitmentsInclusionProof", size, 4)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.KzgCommitmentsInclusionProof {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the DataColumnIdentifier object
func (d *DataColumnIdentifier) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DataColumnIdentifier object to a target array
func (d *DataColumnIdentifier) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockRoot'
	if size := len(d.BlockRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BlockRoot", size, 32)
		return
	}
	dst = append(dst, d.BlockRoot...)

	// Field (1) 'ColumnIndex'
	dst = ssz.MarshalUint64(dst, d.ColumnIndex)

	return
}

// UnmarshalSSZ ssz unmarshals the DataColumnIdentifier object
func (d *DataColumnIdentifier) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockRoot'
	if cap(d.BlockRoot) == 0 {
		d.BlockRoot = make([]byte, 0, len(buf[0:32]))
	}
	d.BlockRoot = append(d.BlockRoot, buf[0:32]...)

	// Field (1) 'ColumnIndex'
	d.ColumnIndex = ssz.UnmarshallUint64(buf[32:40])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DataColumnIdentifier object
func (d *DataColumnIdentifier) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the DataColumnIdentifier object
func (d *DataColumnIdentifier) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DataColumnIdentifier object with a hasher
func (d *DataColumnIdentifier) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockRoot'
	if size := len(d.BlockRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BlockRoot", size, 32)
		return
	}
	hh.PutBytes(d.BlockRoot)

	// Field (1) 'ColumnIndex'
	hh.PutUint64(d.ColumnIndex)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the InclusionList object
func (i *InclusionList) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the InclusionList object to a target array
func (i *InclusionList) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(52)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(i.Slot))

	// Field (1) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(i.ValidatorIndex))

	// Field (2) 'InclusionListCommitteeRoot'
	if size := len(i.InclusionListCommitteeRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.InclusionListCommitteeRoot", size, 32)
		return
	}
	dst = append(dst, i.InclusionListCommitteeRoot...)

	// Offset (3) 'Transactions'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(i.Transactions); ii++ {
		offset += 4
		offset += len(i.Transactions[ii])
	}

	// Field (3) 'Transactions'
	if size := len(i.Transactions); size > 16 {
		err = ssz.ErrListTooBigFn("--.Transactions", size, 16)
		return
	}
	{
		offset = 4 * len(i.Transactions)
		for ii := 0; ii < len(i.Transactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(i.Transactions[ii])
		}
	}
	for ii := 0; ii < len(i.Transactions); ii++ {
		if size := len(i.Transactions[ii]); size > 512 {
			err = ssz.ErrBytesLengthFn("--.Transactions[ii]", size, 512)
			return
		}
		dst = append(dst, i.Transactions[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the InclusionList object
func (i *InclusionList) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 52 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'Slot'
	i.Slot = github_com_prysmaticlabs_prysm_v5_consensus_types_primitives.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ValidatorIndex'
	i.ValidatorIndex = github_com_prysmaticlabs_prysm_v5_consensus_types_primitives.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'InclusionListCommitteeRoot'
	if cap(i.InclusionListCommitteeRoot) == 0 {
		i.InclusionListCommitteeRoot = make([]byte, 0, len(buf[16:48]))
	}
	i.InclusionListCommitteeRoot = append(i.InclusionListCommitteeRoot, buf[16:48]...)

	// Offset (3) 'Transactions'
	if o3 = ssz.ReadOffset(buf[48:52]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 != 52 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'Transactions'
	{
		buf = tail[o3:]
		num, err := ssz.DecodeDynamicLength(buf, 16)
		if err != nil {
			return err
		}
		i.Transactions = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 512 {
				return ssz.ErrBytesLength
			}
			if cap(i.Transactions[indx]) == 0 {
				i.Transactions[indx] = make([]byte, 0, len(buf))
			}
			i.Transactions[indx] = append(i.Transactions[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the InclusionList object
func (i *InclusionList) SizeSSZ() (size int) {
	size = 52

	// Field (3) 'Transactions'
	for ii := 0; ii < len(i.Transactions); ii++ {
		size += 4
		size += len(i.Transactions[ii])
	}

	return
}

// HashTreeRoot ssz hashes the InclusionList object
func (i *InclusionList) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the InclusionList object with a hasher
func (i *InclusionList) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(i.Slot))

	// Field (1) 'ValidatorIndex'
	hh.PutUint64(uint64(i.ValidatorIndex))

	// Field (2) 'InclusionListCommitteeRoot'
	if size := len(i.InclusionListCommitteeRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.InclusionListCommitteeRoot", size, 32)
		return
	}
	hh.PutBytes(i.InclusionListCommitteeRoot)

	// Field (3) 'Transactions'
	{
		subIndx := hh.Index()
		num := uint64(len(i.Transactions))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range i.Transactions {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 512 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (512+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedInclusionList object
func (s *SignedInclusionList) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedInclusionList object to a target array
func (s *SignedInclusionList) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(100)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	if s.Message == nil {
		s.Message = new(InclusionList)
	}
	offset += s.Message.SizeSSZ()

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	dst = append(dst, s.Signature...)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedInclusionList object
func (s *SignedInclusionList) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 100 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 100 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[4:100]))
	}
	s.Signature = append(s.Signature, buf[4:100]...)

	// Field (0) 'Message'
	{
		buf = tail[o0:]
		if s.Message == nil {
			s.Message = new(InclusionList)
		}
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedInclusionList object
func (s *SignedInclusionList) SizeSSZ() (size int) {
	size = 100

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(InclusionList)
	}
	size += s.Message.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedInclusionList object
func (s *SignedInclusionList) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedInclusionList object with a hasher
func (s *SignedInclusionList) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	hh.PutBytes(s.Signature)

	hh.Merkleize(indx)
	return
}
